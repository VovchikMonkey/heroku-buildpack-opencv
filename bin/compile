#!/usr/bin/env bash
# bin/compile BUILD_DIR CACHE_DIR ENV_DIR

arrow() {
  sed -u 's/^/-----> /'
}
indent() {
  sed -u 's/^/       /'
}

BUILD_DIR=$1
CACHE_DIR=$2
BUILDPACK_DIR=`cd $(dirname $0)/..; pwd`

S3_BASE_URL="https://s3.amazonaws.com/crystalvista/devtools"
PKG_VERSION=2.4.11
PKG_TARBALL="$S3_BASE_URL/opencv-$PKG_VERSION.tar.gz"
PKG_ETAG=$(curl --fail --head "$PKG_TARBALL" -s | grep -Ei '^etag' | sed -r 's/^etag|[^a-zA-Z0-9]+//gi')

VENDOR_PATH="/app/vendor/opencv"
TARGET_PATH="/tmp/codon/vendor/opencv"
CACHE_PATH="$CACHE_DIR/opencv_$PKG_ETAG"
SLUG_PATH="$BUILD_DIR/vendor/opencv"

echo "Installing OpenCV $PKG_VERSION" | arrow
mkdir -p "$TARGET_PATH"

if [ -d "$CACHE_PATH" ]; then
  echo "Restoring  from cache ($PKG_ETAG)" | indent
  cp -a "$CACHE_PATH/*" "$TARGET_PATH"
else
  echo "Fetching   $PKG_TARBALL" | indent
  curl --fail --retry 3 --retry-delay 1 --connect-timeout 3 "$PKG_TARBALL" -s -o - | tar zxf - -C "$TARGET_PATH"
  echo "Caching package ($PKG_ETAG)" | indent
  mkdir -p "$CACHE_PATH"
  cp -a "$TARGET_PATH/*" "$CACHE_PATH"
fi

# copy libs into slug
mkdir -p "$SLUG_PATH"
cp -a "$TARGET_PATH/lib" "$SLUG_PATH"

# configure paths
cat <<EOF > "$BUILD_DIR/.profile.d/opencv.sh"
export LD_LIBRARY_PATH="$VENDOR_PATH/lib:\$LD_LIBRARY_PATH"
export PKG_CONFIG_PATH="$VENDOR_PATH/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

# propagate paths to subsequent buildpacks
export LIBRARY_PATH="$TARGET_PATH/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$TARGET_PATH/include:$INCLUDE_PATH"
export PKG_CONFIG_PATH="$TARGET_PATH/lib/pkgconfig:$PKG_CONFIG_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
#export | grep -Ee '\s(LIBRARY_PATH|INCLUDE_PATH|PKG_CONFIG_PATH|CPATH|CPPPATH)=' > "$BUILDPACK_DIR/export"
echo "Exported:  INCLUDE_PATH LIBRARY_PATH CPATH CPPPATH" | indent
echo
